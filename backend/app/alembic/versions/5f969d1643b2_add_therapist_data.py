"""add therapist data

Revision ID: 5f969d1643b2
Revises: bffd47c6cee0
Create Date: 2024-09-17 10:19:43.822275

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5f969d1643b2'
down_revision: Union[str, None] = 'bffd47c6cee0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('therapist_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('qualifications', sa.String(), nullable=True),
    sa.Column('expertise', sa.String(), nullable=True),
    sa.Column('bio', sa.String(), nullable=True),
    sa.Column('treatment_approach', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_therapist_data_user_id'), 'therapist_data', ['user_id'], unique=False)
    op.add_column('patient_data', sa.Column('therapist_id', sa.Integer(), nullable=True))
    op.add_column('patient_data', sa.Column('has_onboarded', sa.Boolean(), nullable=True))
    op.create_index(op.f('ix_patient_data_therapist_id'), 'patient_data', ['therapist_id'], unique=False)
    op.create_foreign_key(None, 'patient_data', 'therapist_data', ['therapist_id'], ['id'])
    op.add_column('users', sa.Column('role', sa.String(), nullable=True))

    # custom migration for existing data
    op.execute("""
        UPDATE users
        SET role = CASE 
            WHEN is_therapist = TRUE THEN 'therapist'
            ELSE 'patient'
        END
    """)
    
    op.execute("""
        INSERT INTO therapist_data (user_id)
        SELECT id FROM users WHERE role = 'therapist'
    """)
    
    op.execute("""
        UPDATE patient_data pd
        SET therapist_id = (
            SELECT td.id 
            FROM therapist_data td
            JOIN users u ON u.id = pd.user_id 
            WHERE u.therapist_id = td.user_id 
        )
    """)

    op.execute("""
        UPDATE patient_data pd
        SET has_onboarded = (
            SELECT u.has_onboarded
            FROM users u
            WHERE u.id = pd.user_id
        )
    """)

    op.drop_constraint('users_therapist_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'therapist_id')
    op.drop_column('users', 'has_onboarded')
    op.drop_column('users', 'is_therapist')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_therapist', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('has_onboarded', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('therapist_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_therapist_id_fkey', 'users', 'users', ['therapist_id'], ['id'])
    op.drop_column('users', 'role')
    op.drop_constraint(None, 'patient_data', type_='foreignkey')
    op.drop_index(op.f('ix_patient_data_therapist_id'), table_name='patient_data')
    op.drop_column('patient_data', 'has_onboarded')
    op.drop_column('patient_data', 'therapist_id')
    op.drop_index(op.f('ix_therapist_data_user_id'), table_name='therapist_data')
    op.drop_table('therapist_data')
    # ### end Alembic commands ###
